import { createAsyncThunk, createSlice, type PayloadAction } from '@reduxjs/toolkit';
import { type AppThunk, type RootState } from '../store.redux';
import userApi from '../../apis/user.api';
import { type User } from '../../models';


export interface UserState {
    currentUser: User | null;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: UserState = {
    currentUser: null,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUser = createAsyncThunk(
    'user/getUser',
    async (id: string) => {
        return await userApi.read(id);
    }
);

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        login: (state, action: PayloadAction<User>) => {
            state.currentUser = action.payload;
        },
        logout: (state) => {
            state.currentUser = null;
        },
        read: (state, action: PayloadAction<User>) => {
            state.currentUser = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getUser.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getUser.fulfilled, (state, action) => {
                state.status = 'idle';
                state.currentUser = action.payload;
            })
            .addCase(getUser.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const { login, logout, read } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentUser = (state: RootState): User | null => state.user.currentUser;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const getUserData =
    (currentUser: User): AppThunk =>
        (dispatch, getState) => {
            const currentUser = selectCurrentUser(getState());

            if (currentUser !== null) {
                dispatch(read(currentUser));
            }
        };

export default userSlice.reducer;
